@page
@model NoodlesSimulator.Pages.DashboardModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="utf-8" />
    <title>Noodles Simulator — 🔧 ממשק ניהול</title>
    <link rel="stylesheet" href="/css/site.css" />
    <style>
        body {
            background-color: #111;
            color: #fff;
            font-family: "Segoe UI", sans-serif;
            padding: 40px;
            direction: rtl;
        }
        
        h1 { 
            font-size: 32px; 
            margin-bottom: 20px; 
        }
        
        h2 { 
            margin-top: 40px; 
            border-bottom: 2px solid #333; 
            padding-bottom: 5px; 
            color: #ffd700; 
        }
        
        table {
            width: 100%; 
            border-collapse: collapse; 
            margin-top: 15px;
            background-color: #1e1e1e; 
            border-radius: 10px; 
            overflow: hidden;
        }
        
        th, td {
            padding: 12px; 
            border-bottom: 1px solid #333; 
            text-align: center;
        }
        
        th { 
            background-color: #222; 
            font-weight: bold; 
        }
        tr:nth-child(even) { background-color: #191919; }
        ul li { margin: 8px 0; }
        ul strong { color: #1e90ff; }
        .back-to-quiz {
            display: inline-block; margin-top: 30px; padding: 10px 20px;
            background-color: #1e90ff; color: white; text-decoration: none;
            border-radius: 8px; font-weight: bold;
        }
        .back-to-quiz:hover { background-color: #0077cc; }
        .background-gif {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            object-fit: cover; opacity: 0.05; z-index: -1;
        }
    </style>
</head>
<body>
    <a href="/Index" class="back-to-quiz">⬅ חזרה לחידון</a>
    <img src="/assets/background.gif" class="background-gif" alt="רקע" />
    <h1>📊 ממשק ניהול - Dashboard</h1>
    <div style="margin: 10px 0 20px 0;">
        <a href="/Difficulty" class="back-to-quiz" style="background:#ffc107; color:#222;">🔎 רמות קושי</a>
    </div>

    @if (ViewData["SuccessMessage"] != null)
    {
        <div style="background-color:#28a428; padding:12px; border-radius:6px; margin:20px 0; color:white; font-weight:bold; text-align:center;">
            @ViewData["SuccessMessage"]
        </div>
    }

    <h2>✅ סטטיסטיקה כללית <span id="last-update" style="font-size: 14px; color: #888;">(מתעדכן...)</span></h2>
    <ul>
        <li>👥 משתמשים רשומים: <strong id="all-users-count">@Model.AllUsers.Count</strong></li>
        <li>🟢 מחוברים כרגע: <strong id="online-users-count">@Model.OnlineUsers.Count</strong></li>
        <li>🚩 מסומנים כ־Cheaters: <strong id="cheaters-count">@Model.Cheaters.Count</strong></li>
        <li>🔒 חסומים: <strong id="banned-users-count">@Model.BannedUsers.Count</strong></li>
        <li>📈 ממוצע הצלחה: <strong id="average-success-rate">@Model.AverageSuccessRate.ToString("0.0")%</strong></li>
    </ul>

    <h2>📶 משתמשים מחוברים כרגע</h2>
    <table id="online-users-table">
        <tr>
            <th>מיקום</th>
            <th>שם משתמש</th>
            <th>נענו</th>
            <th>נכונות</th>
            <th>הצלחה</th>
        </tr>
        @for (int i = 0; i < Model.OnlineUsers.Count; i++)
        {
            var user = Model.OnlineUsers[i];
            <tr>
                <td>@(i + 1)</td>
                <td>@user.Username</td>
                <td>@user.TotalAnswered</td>
                <td>@user.CorrectAnswers</td>
                <td>@(user.TotalAnswered > 0 ? ((double)user.CorrectAnswers / user.TotalAnswered).ToString("0%") : "N/A")</td>
            </tr>
        }
    </table>

    <h2>🏆 טבלת מובילים</h2>
    <table id="top-users-table">
        <tr>
            <th>מיקום</th>
            <th>שם משתמש</th>
            <th>נענו</th>
            <th>נכונות</th>
            <th>הצלחה</th>
        </tr>
        @for (int i = 0; i < Model.TopUsers.Count; i++)
        {
            var user = Model.TopUsers[i];
            <tr>
                <td>@(i + 1)</td>
                <td>@user.Username</td>
                <td>@user.TotalAnswered</td>
                <td>@user.CorrectAnswers</td>
                <td>@(user.TotalAnswered > 0 ? ((double)user.CorrectAnswers / user.TotalAnswered).ToString("0%") : "N/A")</td>
            </tr>
        }
    </table>

    <h2>🚨 Cheaters</h2>
    <table>
        <tr><th>שם משתמש</th><th>נענו</th><th>נכונות</th><th>הצלחה</th></tr>
        @foreach (var user in Model.Cheaters)
        {
            <tr>
                <td>@user.Username</td>
                <td>@user.TotalAnswered</td>
                <td>@user.CorrectAnswers</td>
                <td>@(user.TotalAnswered > 0 ? ((double)user.CorrectAnswers / user.TotalAnswered).ToString("0%") : "N/A")</td>
            </tr>
        }
    </table>

    <h2>🔒 חסומים</h2>
    <table>
        <tr><th>שם משתמש</th><th>נענו</th><th>נכונות</th><th>הצלחה</th></tr>
        @foreach (var user in Model.BannedUsers)
        {
            <tr>
                <td>@user.Username</td>
                <td>@user.TotalAnswered</td>
                <td>@user.CorrectAnswers</td>
                <td>@(user.TotalAnswered > 0 ? ((double)user.CorrectAnswers / user.TotalAnswered).ToString("0%") : "N/A")</td>
            </tr>
        }
    </table>

</body>

<script>
let updateInterval;

async function fetchDashboardData() {
    try {
        const response = await fetch('/api/dashboard-data?_=' + new Date().getTime());
        const data = await response.json();
        
        // Update statistics
        document.getElementById('all-users-count').textContent = data.allUsersCount;
        document.getElementById('online-users-count').textContent = data.onlineUsersCount;
        document.getElementById('cheaters-count').textContent = data.cheatersCount;
        document.getElementById('banned-users-count').textContent = data.bannedUsersCount;
        document.getElementById('average-success-rate').textContent = data.averageSuccessRate + '%';
        
        // Update online users table
        updateTable('online-users-table', data.onlineUsersList, ['rank', 'username', 'totalAnswered', 'correctAnswers', 'successRate']);
        
        // Update top users table
        updateTable('top-users-table', data.topUsersList, ['rank', 'username', 'totalAnswered', 'correctAnswers', 'successRate']);
        
        // Baseline time; smooth clock updates separately
        window.__dashLastUpdateAt = Date.now();
        
    } catch (error) {
        console.warn('Failed to fetch dashboard data:', error);
        // keep previous time; no clearing
        document.getElementById('last-update').textContent = '(שגיאה בעדכון - מחכה...)';
    }
}

function updateTable(tableId, data, columns) {
    const table = document.getElementById(tableId);
    if (!table) return;
    
    // Keep header row, remove data rows
    const headerRow = table.querySelector('tr');
    table.innerHTML = '';
    table.appendChild(headerRow);
    
    // Add new data rows
    data.forEach((user, index) => {
        const row = table.insertRow();
        
        columns.forEach((column, colIndex) => {
            const cell = row.insertCell();
            if (column === 'rank') {
                cell.textContent = index + 1;
            } else if (column === 'successRate') {
                cell.textContent = user[column] + '%';
            } else {
                cell.textContent = user[column];
            }
        });
    });
}

// Start auto-update every 3 seconds
function startAutoUpdate() {
    updateInterval = setInterval(fetchDashboardData, 200);
    // Smooth clock every 200ms
    if (!window.__dashClockInterval) {
        window.__dashClockInterval = setInterval(() => {
            const el = document.getElementById('last-update');
            if (!el) return;
            const now = new Date();
            el.textContent = `(עודכן ב-${now.toLocaleTimeString('he-IL')})`;
        }, 200);
    }
}

// Stop auto-update
function stopAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
    }
}

// Start updates when page loads
window.addEventListener('load', () => {
    fetchDashboardData(); // Initial load
    startAutoUpdate();
});

// Stop updates when page is hidden (to save resources)
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        stopAutoUpdate();
    } else {
        startAutoUpdate();
    }
});
</script>

<!-- Difficulty Management Section -->
<h2>🎯 ניהול רמות קושי</h2>

@if (TempData["DifficultyMessage"] != null)
{
    <div style="background: #d4edda; border: 2px solid #28a745; padding: 15px; margin: 20px 0; border-radius: 8px;">
        <strong style="color: #155724;">✅ @TempData["DifficultyMessage"]</strong>
    </div>
}

@if (TempData["DifficultyError"] != null)
{
    <div style="background: #f8d7da; border: 2px solid #dc3545; padding: 15px; margin: 20px 0; border-radius: 8px;">
        <strong style="color: #721c24;">❌ @TempData["DifficultyError"]</strong>
    </div>
}

<div style="background: #1e1e1e; padding: 25px; border-radius: 10px; margin-bottom: 30px;">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <div>
            <h3 style="margin: 0; color: #ffd700;">סיכום רמות קושי</h3>
            <p style="margin: 5px 0; color: #999; font-size: 14px;">
                Easy ≥ 65% · Medium 35–65% · Hard &lt; 35%
            </p>
        </div>
        <form method="post" asp-page-handler="RecalculateDifficulties" style="margin: 0;">
            <button type="submit" onclick="return confirm('האם לחשב מחדש את כל רמות הקושי לפי סטטיסטיקות?');"
                    style="padding: 10px 20px; background: #4caf50; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: bold;">
                🔄 חשב מחדש אוטומטית
            </button>
        </form>
    </div>
    
    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin-bottom: 20px;">
        <div style="background: #2d5016; padding: 20px; border-radius: 8px; text-align: center;">
            <div style="font-size: 48px; font-weight: bold; color: #4caf50;">@Model.EasyCount</div>
            <div style="color: #81c784; font-size: 18px; margin-top: 5px;">🟢 קלות</div>
        </div>
        <div style="background: #4d3800; padding: 20px; border-radius: 8px; text-align: center;">
            <div style="font-size: 48px; font-weight: bold; color: #ffa726;">@Model.MediumCount</div>
            <div style="color: #ffb74d; font-size: 18px; margin-top: 5px;">🟡 בינוניות</div>
        </div>
        <div style="background: #4d1616; padding: 20px; border-radius: 8px; text-align: center;">
            <div style="font-size: 48px; font-weight: bold; color: #ef5350;">@Model.HardCount</div>
            <div style="color: #e57373; font-size: 18px; margin-top: 5px;">🔴 קשות</div>
        </div>
    </div>
    
    @if (Model.DifficultyQuestions.Any())
    {
        <h4 style="margin: 20px 0 10px 0;">רשימת שאלות (מעודכן אוטומטית)</h4>
        <div style="max-height: 400px; overflow-y: auto; background: #111; padding: 15px; border-radius: 8px;">
            <table style="width: 100%; font-size: 13px;">
                <thead style="position: sticky; top: 0; background: #222; z-index: 10;">
                    <tr>
                        <th style="text-align: right;">שאלה</th>
                        <th>רמת קושי</th>
                        <th>אחוז הצלחה</th>
                        <th>ניסיונות</th>
                        <th>נכונות</th>
                        <th>עדכון אחרון</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var q in Model.DifficultyQuestions.Take(100))
                    {
                        var diffColor = q.Difficulty switch
                        {
                            "easy" => "#4caf50",
                            "medium" => "#ffa726",
                            "hard" => "#ef5350",
                            _ => "#999"
                        };
                        var diffText = q.Difficulty switch
                        {
                            "easy" => "קל",
                            "medium" => "בינוני",
                            "hard" => "קשה",
                            _ => q.Difficulty
                        };
                        
                        <tr style="border-bottom: 1px solid #333;">
                            <td style="text-align: right; max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @q.QuestionFile
                            </td>
                            <td>
                                <span style="background: @diffColor; padding: 5px 12px; border-radius: 15px; font-weight: bold; color: white;">
                                    @diffText
                                </span>
                            </td>
                            <td style="font-weight: bold;">@q.SuccessRate.ToString("F1")%</td>
                            <td>@q.TotalAttempts</td>
                            <td>@q.CorrectAttempts</td>
                            <td style="font-size: 11px; color: #999;">@q.LastUpdated.ToLocalTime().ToString("dd/MM HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        @if (Model.DifficultyQuestions.Count > 100)
        {
            <p style="text-align: center; color: #999; margin-top: 10px;">
                מציג 100 מתוך @Model.DifficultyQuestions.Count שאלות
            </p>
        }
    }
    else
    {
        <div style="text-align: center; padding: 40px; color: #999;">
            <p>אין עדיין נתוני רמות קושי במערכת</p>
            <p style="font-size: 14px;">השאלות יתווספו אוטומטית כשמשתמשים יענו עליהן</p>
        </div>
    }
</div>

@if (Model.AllUsers.Any(u => u.Username == "Admin"))
{
    // הוסרה הצגת דיווחי טעויות בשאלות לפי בקשת המשתמש
}
</html>
